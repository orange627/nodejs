<!DOCTYPE html>
<html>

<head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title>Image</title>
</head>

<body>
    <!--スクロール機能設定-->
    <div id="menu">
        <div id="menu-icon">&#9776;</div>
        <div id="menu-content" class="hidden">
            <button id="scroll-toggle">Scroll ON</button>
            <br>
            <button id="scroll-up">SLOW</button>
            <button id="scroll-down">FAST</button>
            <div>
                <label for="scroll-speed">Speed /ms</label>
                <input type="number" id="scroll-speed" value="13">
            </div>
            <a href="/image">
                <button id="back">back</button>
            </a>
            <div id="message"></div>
        </div>
    </div>
    <%#画像を縦に表示%>
        <div class="image-container">
            <%for(file of files){%>
                //heightを指定しないとlazyの効果がない
                <img src="<%=file%>" width="auto" height="1040" loading = "lazy">
                <%}%>
        </div>

</body>
<style>
    /* 右上に配置するためのスタイル */
    #menu {
        position: fixed;
        top: 10px;
        right: 10px;
        z-index: 1000;
    }

    #menu-icon {
        display: flex;
        justify-content: flex-end;
        width: 22px;
        font-size: 24px;
        cursor: pointer;
        background-color: #333;
        color: white;
        padding: 0px 8px;
        border-radius: 5px;
        margin: 0 0 0 auto;
    }

    #menu-content {
        text-align: right;
        background-color: #444;
        color: white;
        padding: 10px;
        margin-top: 5px;
        border-radius: 5px;
    }

    #menu-content.hidden {
        display: none;
    }

    button {
        background-color: #555;
        color: white;
        border: none;
        padding: 10px;
        margin: 5px 0;
        cursor: pointer;
        border-radius: 5px;
    }

    input {
        width: auto;
        padding: 5px;
        border: 1px solid #555;
        border-radius: 5px;
    }

    /*画像を縦に並べる*/
    .image-container {
        display: flex;
        flex-direction: column;
        align-items: center;
    }

    /*背景をダークに*/
    body {
        background-color: #1e1e1e;
    }

    /*スマホの場合*/
    @media(max-width:1024px) {

        /*画像は画面最大*/
        img {
            width: 100%;
            height: auto;
        }

        /*ダブルタップで拡大させない*/
        html {
            touch-action: manipulation;
        }
    }
</style>
<script>
    document.addEventListener("DOMContentLoaded", () => {
        const message = document.getElementById("message");
        const scrollUp = document.getElementById("scroll-up");
        const scrollDown = document.getElementById("scroll-down");
        const menuIcon = document.getElementById("menu-icon");
        const menuContent = document.getElementById("menu-content");
        const scrollToggle = document.getElementById("scroll-toggle");
        const scrollSpeedInput = document.getElementById("scroll-speed");

        let isScrolling = false;
        let scrollInterval = null;

        //classList.toggleでクラスの追加or削除
        menuIcon.addEventListener("click", () => {
            menuContent.classList.toggle("hidden");
        });

        // Toggle auto-scroll
        scrollToggle.addEventListener("click", () => {
            if (isScrolling) {
                clearInterval(scrollInterval);
                isScrolling = false;
                scrollToggle.textContent = "Scroll ON";
            } else {
                const speed = parseInt(scrollSpeedInput.value, 10);
                scrollInterval = setInterval(() => {
                    window.scrollBy(0, 1);
                }, speed);
                isScrolling = true;
                scrollToggle.textContent = "Scroll OFF";
            }
        });
        scrollUp.addEventListener("click", () => {
            scrollSpeedInput.value++;
            //inputイベントを発火させてスクロールスピードを更新
            scrollSpeedInput.dispatchEvent(new Event("input"));
        });
        scrollDown.addEventListener("click", () => {
            scrollSpeedInput.value--;
            scrollSpeedInput.dispatchEvent(new Event("input"));
        });

        // Update scroll speed dynamically
        scrollSpeedInput.addEventListener("input", () => {
            if (isScrolling) {
                clearInterval(scrollInterval);
                const speed = parseInt(scrollSpeedInput.value, 10);
                scrollInterval = setInterval(() => {
                    window.scrollBy(0, 1);
                }, speed);
            }
        });
        //サイズ調整
        adjust();
        // ウィンドウサイズ変更時に再調整
        window.addEventListener("resize", adjust);
    });

    //解像度に合わせてボタンのサイズ調整
    function adjust() {
        const menuIcon = document.getElementById("menu-icon");
        const menuContent = document.getElementById("menu-content");
        const scrollToggle = document.getElementById("scroll-toggle");
        const scrollSpeedInput = document.getElementById("scroll-speed");
        const scrollUp = document.getElementById("scroll-up");
        const scrollDown = document.getElementById("scroll-down");
        const back = document.getElementById("back");
        const dpr = window.devicePixelRatio;
        const width = window.innerWidth;
        //がめサイズが小さい時ボタンサイズを調整
        if (width > 1024 || dpr < 2) return;
        message.innerHTML = width;
        menuIcon.style.width = 22 * dpr * 2 + "px";
        menuIcon.style.height = 28 * dpr * 2 + "px";
        menuIcon.style.fontSize = 22 * dpr * 2 + "px";
        scrollToggle.style.width = 28 * dpr * 4 + "px";
        scrollToggle.style.height = 22 * dpr * 2 + "px";
        scrollToggle.style.fontSize = 22 * dpr + "px";
        scrollUp.style.width = 28 * dpr * 4 + "px";
        scrollUp.style.height = 22 * dpr * 2 + "px";
        scrollUp.style.fontSize = 22 * dpr + "px";
        scrollDown.style.width = 28 * dpr * 4 + "px";
        scrollDown.style.height = 22 * dpr * 2 + "px";
        scrollDown.style.fontSize = 22 * dpr + "px";
        back.style.width = 28 * dpr * 4 + "px";
        back.style.height = 22 * dpr * 2 + "px";
        back.style.fontSize = 22 * dpr + "px";
    }

    //SSEの設定
    var dir = "<%=dir%>";
    const eventSource = new EventSource('/image/show_sse/' + dir);
    eventSource.onmessage = (event) => {
        const message = JSON.parse(event.data);
        console.log("Received:", message);
        const imageContainer = document.querySelector('.image-container');
        const img = document.createElement('img');
        img.src = message.files;
        img.width = 720;
        img.height = 1040;
        img.loading = "lazy";
        imageContainer.appendChild(img);
    };
    eventSource.onerror = () => {
        console.error('Error with SSE connection.');
    };

</script>

</html>