<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Server-Side Block Breaker</title>
</head>
<body>
    <canvas id="gameCanvas"></canvas>
</body>
<style>
    body {
        margin: 0;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background-color: #333;
    }
    canvas {
        border: 2px solid #fff;
        background-color: #000;
    }
</style>
<script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = 800;
    canvas.height = 600;

    const ws = new WebSocket('ws://192.168.151.90:3002');
    //const ws = new WebSocket('ws://localhost:3002');
    ws.onmessage = (event) => {
        const message = JSON.parse(event.data);
        console.log("aaa");
        if (message.type === 'gameOver') {
            alert('Game Over');
            console.log('gameover');
            location.reload();
        }

        if (message.type === 'update') {
            const { gameState } = message;
            draw(gameState);
        }
    };

    document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') ws.send(JSON.stringify({ direction: 'left' }));
        if (e.key === 'ArrowRight') ws.send(JSON.stringify({ direction: 'right' }));
    });

    function draw(state) {
        ctx.clearRect(0, 0, canvas.width, canvas.height);

        // ボール描画
        ctx.beginPath();
        ctx.arc(state.ball.x, state.ball.y, state.ball.radius, 0, Math.PI * 2);
        ctx.fillStyle = 'red';
        ctx.fill();
        ctx.closePath();

        // パドル描画
        ctx.fillStyle = 'blue';
        ctx.fillRect(state.paddle.x, canvas.height - 10, state.paddle.width, state.paddle.height);

        // ブロック描画
        state.bricks.forEach((row) =>
            row.forEach((brick) => {
                if (brick.visible) {
                    ctx.fillStyle = 'green';
                    ctx.fillRect(brick.x, brick.y, 75, 20);
                }
            })
        );
    }
</script>
</html>

<!--
<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.css" rel="stylesheet" crossorigin="anonymous">
    <link rel='stylesheet' href='/stylesheets/style.css' />
  </head>
  <body class="container">
    <h1><%= title %></h1>
    <p><%- content%></p>

    <canvas id="myCanvas" width="480" height="320"></canvas>

  </body>
  <style>
    canvas{
        background:#eee;
        display:block;
        margin:0 auto;
    }
  </style>
  <script>
    const canvas=document.getElementById("myCanvas");
    const ctx=canvas.getContext("2d");
    let x=20;
    let y=50;
    let dx=1;
    let dy=1;
    let ballRad=20;
    function draw(){
        ctx.clearRect(0,0,canvas.width,canvas.height);

        ctx.beginPath();
        ctx.rect(20,0,100,100);
        ctx.fillStyle='#FF0000';
        ctx.fill();
        ctx.closePath();

        ctx.beginPath();
        ctx.arc(x, y, ballRad, 0, Math.PI * 2, false);
        ctx.fillStyle = "green";
        ctx.fill();
        ctx.closePath();
        x+=dx;
        y+=dy;

        if(y+dy-ballRad<0 || y+dy+ballRad>canvas.height){
            dy=-dy;
        }
        if(x+dx-ballRad<0 || x+dx+ballRad>canvas.width){
            dx=-dx;
        }


    }
    setInterval(draw,10);
  </script>
</html>
-->